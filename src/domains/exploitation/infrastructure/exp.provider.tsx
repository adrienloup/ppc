import { type FC, useCallback, useEffect, useReducer } from 'react';
import { ExpContext, ExpDispatchContext } from '@/src/domains/exploitation/infrastructure/exp.context.tsx';
import { expReducer } from '@/src/domains/exploitation/application/exp.reducer.ts';
import { useInterval } from '@/src/shared/hooks/useInterval.ts';
import { useLocalStorage } from '@/src/shared/hooks/useLocalStorage.ts';
import { useAccount } from '@/src/domains/account/interfaces/useAccount.ts';
import { EXP_KEY } from '@/src/domains/exploitation/infrastructure/exp.key.ts';
import { EXP_STATE } from '@/src/domains/exploitation/infrastructure/exp.state.ts';
import { USER_KEY } from '@/src/domains/authentification/infrastructure/user.key.ts';
import type { Children } from '@/src/shared/types/children.type.ts';

export const ExpProvider: FC<{ children: Children }> = ({ children }) => {
  const expStorage = useLocalStorage(EXP_KEY, EXP_STATE);
  const userStorage = useLocalStorage(USER_KEY, null);
  const [state, dispatch] = useReducer(expReducer, expStorage.get() ?? EXP_STATE);
  const { pause } = useAccount();
  const user = userStorage.get();

  const updateWireCost = useCallback(() => {
    const cost = state.wireCost > 8 ? state.wireCost - 0.26 : Math.random() * 8 + 12; // 0 & 1, 0 & 8, 12 & 20
    dispatch({ type: 'WIRE_COST', cost });
  }, [state.wireCost]);

  useInterval(updateWireCost, 1e4, !!user && !pause);

  useEffect(() => {
    if (!user) return;
    expStorage.set(state);
  }, [state]);

  return (
    <ExpContext.Provider value={state}>
      <ExpDispatchContext.Provider value={dispatch}>{children}</ExpDispatchContext.Provider>
    </ExpContext.Provider>
  );
};
