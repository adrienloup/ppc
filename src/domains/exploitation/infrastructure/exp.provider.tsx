import { type FC, useEffect, useReducer } from 'react';
import {
  ExpContext,
  ExpDispatchContext,
} from '@/src/domains/exploitation/infrastructure/exp.context.tsx';
import { expReducer } from '@/src/domains/exploitation/application/exp.reducer.ts';
import { useLocalStorage } from '@/src/shared/hooks/useLocalStorage.ts';
import { EXP_KEY } from '@/src/domains/exploitation/infrastructure/exp.key.ts';
import { EXP_STATE } from '@/src/domains/exploitation/infrastructure/exp.state.ts';
import { USER_KEY } from '@/src/domains/authentification/infrastructure/user.key.ts';
import type { Children } from '@/src/shared/types/children.type.ts';

export const ExpProvider: FC<{ children: Children }> = ({ children }) => {
  const expStorage = useLocalStorage(EXP_KEY, EXP_STATE);
  const userStorage = useLocalStorage(USER_KEY, null);
  const [state, dispatch] = useReducer(expReducer, expStorage.get() ?? EXP_STATE);

  useEffect(() => {
    if (!userStorage.get()) return;
    expStorage.set(state);
  }, [state]);

  return (
    <ExpContext.Provider value={state}>
      <ExpDispatchContext.Provider value={dispatch}>{children}</ExpDispatchContext.Provider>
    </ExpContext.Provider>
  );
};
